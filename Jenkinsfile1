pipeline {
    agent any
    tools {
        maven 'M3'
        git 'git'
    }
    stages {
        stage('Git Checkout') {
            steps {
                echo 'Git Checkout'
                git branch: 'main', credentialsId: 'github-ssh-credentials', url: 'git@github.com:Muktamk/FullStack-Blogging-App.git'
            }
        }

        stage('Compile') {
            steps {
                echo 'Compiling the application using Maven'
                sh 'mvn compile'
            }
        }

        stage('Unit Testing') {
            steps {
                echo 'Running Unit Tests'
                sh 'mvn test'
            }
        }

        stage('Build') {
            steps {
                echo 'Building the application'
                sh 'mvn package'
            }
        }

        stage('Build & Tag Docker Image') {
            steps {
                script {
                    // Ensure docker is configured correctly in Jenkins
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                        echo 'Building Docker Image'
                        sh 'docker build -t mukta178/product-dev:latest .'
                    }
                }
            }
        }

        stage('Scan Docker Image with Trivy') {
            steps {
                echo 'Scanning Docker Image with Trivy'
                sh 'trivy image --format table -o image-report.html mukta178/product-dev:latest'
            }
        }

        stage('before push') {
            steps {
                echo 'before push'
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    // Ensure docker is configured correctly in Jenkins
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                        echo 'Pushing Docker Image to registry'
                        sh 'docker push mukta178/product-dev:latest'
                    }
                }
            }
        }

        stage('after push') {
            steps {
                echo 'after push'
            }
        }

        // New stage to connect to Bastion and access the Kubernetes cluster
        stage('Connect to Bastion Host') {
            steps {
                echo 'Connecting to Bastion Host and accessing Kubernetes cluster'

                // Using SSH to connect to Bastion Host
                withCredentials([sshUserPrivateKey(credentialsId: 'kubernetes-connection', keyFileVariable: 'SSH_KEY')]) {
                    sh """
                        # SSH into Bastion Host
                        ssh -o StrictHostKeyChecking=no -i \$SSH_KEY ec2-user@ec2-52-14-0-68.us-east-2.compute.amazonaws.com << EOF
                        echo 'Inside Bastion Host'

                        # Update kubeconfig to access Kubernetes cluster
                        aws eks --region us-east-2 update-kubeconfig --name product-dev

                        # Run kubectl command to verify
                        kubectl get nodes

                        # Exit from the Bastion Host
                        exit
                        EOF
                    """
                }
            }
        }

        // Modify the deployment stage to use SCP for transferring files to Bastion
        stage('K8-Deployment') {
            steps {
                echo 'Deploying to Kubernetes from Bastion Host'

                // SSH into Bastion and copy the deployment file using SCP
                withCredentials([sshUserPrivateKey(credentialsId: 'kubernetes-connection', keyFileVariable: 'SSH_KEY')]) {
                    sh """
                        # SCP deployment file from Jenkins to Bastion Host
                        scp -i \$SSH_KEY -o StrictHostKeyChecking=no ./deployment-service.yml ec2-user@ec2-52-14-0-68.us-east-2.compute.amazonaws.com:/tmp/

                        # SSH into Bastion Host and apply the deployment using kubectl
                        ssh -i \$SSH_KEY -o StrictHostKeyChecking=no ec2-user@ec2-52-14-0-68.us-east-2.compute.amazonaws.com << EOF
                        echo 'Inside Bastion Host'

                        # Update kubeconfig to access Kubernetes cluster
                        aws eks --region us-east-2 update-kubeconfig --name product-dev

                        # Apply Kubernetes deployment
                        kubectl apply -f /tmp/deployment-service.yml -n sb-test

                        # Sleep for a few seconds to allow deployment to propagate
                        sleep 20

                        # Exit from the Bastion Host
                        exit
                        EOF
                    """
                }
            }
        }

        // Modify the verify stage to run from the Bastion host
        stage('Verify K8-Deployment') {
            steps {
                echo 'Verifying deployment in Kubernetes from Bastion Host'

                // SSH into Bastion and verify the deployment from there
                withCredentials([sshUserPrivateKey(credentialsId: 'kubernetes-connection', keyFileVariable: 'SSH_KEY')]) {
                    sh """
                        # SSH into Bastion Host
                        ssh -o StrictHostKeyChecking=no -i \$SSH_KEY ec2-user@ec2-52-14-0-68.us-east-2.compute.amazonaws.com << EOF
                        echo 'Inside Bastion Host'

                        # Update kubeconfig to access Kubernetes cluster
                        aws eks --region us-east-2 update-kubeconfig --name product-dev

                        # Verify the deployment
                        kubectl get pods -n sb-test
                        kubectl get svc -n sb-test

                        # Exit from the Bastion Host
                        exit
                        EOF
                    """
                }
            }
        }
    }
}
